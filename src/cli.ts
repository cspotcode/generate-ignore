#!/usr/bin/env node
import * as fs from 'fs';

function fail(message) {
  console.error(`Error: ${ message }`);
  process.exit(1);
}

const inputFile = '.gitignore';
let input;
try {
  input = fs.readFileSync(inputFile, 'utf8');
} catch(e) {
  if(e.code === 'ENOENT') fail(`Missing ${ inputFile } file`);
}

// Auto-detect line endings
const lineTerminatorMatch = input.match(/\r\n|\n|\r/);
const lineTerminator = lineTerminatorMatch ? lineTerminatorMatch[0] : '\n';

const generateCommentRe = /(?:^|\n)##<generate(.*?)\/>(?:\n|$)/;
const outputTypesMatch = input.match(generateCommentRe);
if(!outputTypesMatch) {
  fail(`Missing ##<generate /> comment in ${ inputFile }`);
}
const outputTypes = outputTypesMatch[1].split(' ').map(v => v.trim()).filter(v => v);

for(let outputType of outputTypes) {
  const forSpanRe = /((?:^|\n)##<for(.*?)>)([\s\S]*?)(\n##<\/for>)(?=\n|$)/g;

  const output = `# Auto-generated by generate-ignore from your .gitignore${ lineTerminator }${
    input.replace(forSpanRe, (all, prefix, attrs, content, suffix) => {
      const include = !!(new RegExp(`(^| )${ outputType }( |$)`)).test(attrs);
      return `${ prefix }${
        include
        ? content.replace(/\n##/g, '\n')
        : content.replace(/\n/g, '\n##')
      }${ suffix }`;
    }) }`;

  const outputFilename = `.${ outputType }ignore`;
  fs.writeFileSync(outputFilename, output);
  console.log(`Generated ${ outputFilename }`);
}